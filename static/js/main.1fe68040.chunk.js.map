{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Wrapper/Wrapper.styled.jsx","components/Wrapper/Wrapper.jsx","App.jsx","index.js"],"names":["Form","styled","form","ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleOnChange","e","setState","target","value","handleOnSubmit","preventDefault","props","contacts","find","contact","toLowerCase","alert","newContact","id","addContact","autoComplete","onSubmit","this","htmlFor","type","pattern","title","required","onChange","Component","List","ul","ContactList","deleteContact","map","onClick","Label","label","Filter","filterValue","findContact","inputId","Container","div","Wrapper","children","App","filter","prevState","newContacts","push","newContactsList","dataset","contactsToRender","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe68040.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  margin-bottom: 30px;\n  padding: 10px 15px;\n  border: 1px solid #000;\n  & label {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 5px;\n    margin-bottom: 15px;\n\n    & input {\n      width: 175px;\n      border: 1px solid grey;\n      border-radius: 2px;\n      outline: none;\n      transition: box-shaddow 200ms linear;\n\n      &:focus {\n        box-shadow: 0 0 2px 2px #87baf4;\n        border: 1px solid #87baf4;\n      }\n    }\n  }\n\n  & button {\n    margin-top: 10px;\n    width: max-content;\n    padding: 2px 15px;\n    font-weight: 700;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    background-color: transparent;\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      background-image: linear-gradient(\n        to top,\n        rgba(67, 109, 216, 1) 50%,\n        rgba(94, 152, 247, 1) 100%\n      );\n      border-color: transparent;\n    }\n  }\n`;\n\nexport { Form };\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Form } from './ContactForm.styled';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    addContact: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        number: PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ),\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleOnSubmit = e => {\n    e.preventDefault();\n\n    const isContactExisting = this.props.contacts.find(\n      contact => contact.name.toLowerCase() === this.state.name.toLowerCase(),\n    );\n\n    if (isContactExisting) {\n      alert(`${this.state.name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.addContact(newContact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <Form autoComplete={'off'} onSubmit={this.handleOnSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            id={this.numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <button type={'submit'}>Add contact</button>\n      </Form>\n    );\n  }\n}\n\nexport { ContactForm };\n","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 5px;\n\n  & button {\n    margin-left: 10px;\n    width: max-content;\n    padding: 2px 15px;\n    font-size: 12px;\n    font-weight: 700;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: transparent;\n\n    &:hover,\n    &:focus {\n      background-image: linear-gradient(\n        to top,\n        rgba(67, 109, 216, 1) 50%,\n        rgba(94, 152, 247, 1) 100%\n      );\n      border-color: transparent;\n    }\n  }\n`;\n\nexport { List };\n","import PropTypes from 'prop-types';\nimport { List } from './ContactList.styled';\n\nfunction ContactList({ contacts, deleteContact }) {\n  return (\n    <List>\n      {contacts.map(({ name, number }) => {\n        return (\n          <li key={name}>\n            {name}: {number}\n            <button type={'button'} data-name={name} onClick={deleteContact}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </List>\n  );\n}\n\nexport { ContactList };\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  deleteContact: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 5px;\n\n  & input {\n    width: 175px;\n    border: 1px solid grey;\n    border-radius: 2px;\n    outline: none;\n    transition: box-shaddow 200ms linear;\n\n    &:focus {\n      border: 1px solid #87baf4;\n      box-shadow: 0 0 2px 2px #87baf4;\n    }\n  }\n`;\n\nexport { Label };\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Label } from './Filter.styled';\n\nfunction Filter({ filterValue, findContact }) {\n  const inputId = uuidv4();\n  return (\n    <Label htmlFor=\"inputId\">\n      Find contacts by name\n      <input\n        id={inputId}\n        type=\"text\"\n        value={filterValue}\n        onChange={findContact}\n      />\n    </Label>\n  );\n}\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n  findContact: PropTypes.func,\n};\n\nexport { Filter };\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 20px 100px;\n`;\n\nexport { Container };\n","import PropTypes from 'prop-types';\nimport { Container } from './Wrapper.styled';\n\nfunction Wrapper({ children }) {\n  return <Container>{children}</Container>;\n}\n\nWrapper.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { Wrapper };\n","import { Component } from 'react';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport { ContactList } from './components/ContactList/ContactList';\nimport { Filter } from './components/Filter/Filter';\nimport { Wrapper } from 'components/Wrapper/Wrapper';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  addContact = newContact => {\n    this.setState(prevState => {\n      const newContacts = [...prevState.contacts];\n      newContacts.push(newContact);\n      return {\n        contacts: newContacts,\n      };\n    });\n  };\n\n  deleteContact = e => {\n    const newContactsList = this.state.contacts.filter(contact => {\n      return contact.name !== e.target.dataset.name;\n    });\n    this.setState({ contacts: newContactsList });\n  };\n\n  findContact = e => {\n    const value = e.target.value;\n    this.setState({ filter: value });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const { addContact, findContact, deleteContact } = this;\n\n    const contactsToRender = !filter\n      ? contacts\n      : contacts.filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n\n    return (\n      <Wrapper>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={addContact} contacts={contacts} />\n        <h2>Contacts</h2>\n        <Filter filterValue={filter} findContact={findContact} />\n        <ContactList\n          contacts={contactsToRender}\n          filterValue={filter}\n          deleteContact={deleteContact}\n        />\n        {filter && contactsToRender.length === 0 && (\n          <p>There are no contacts with this name.</p>\n        )}\n        {!filter && contactsToRender.length === 0 && (\n          <p>There are no contacts here.</p>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}